"""
Autogenerated input type of AddDeviceToken
"""
input AddDeviceTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deviceToken: String!
  deviceType: String!
  userId: ID!
}

"""
Autogenerated return type of AddDeviceToken.
"""
type AddDeviceTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deviceInfo: DeviceInfo!
}

"""
Autogenerated input type of AddFavoriteAnime
"""
input AddFavoriteAnimeInput {
  animeIds: [ID!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of AddFavoriteAnime.
"""
type AddFavoriteAnimePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
Autogenerated input type of AddFavoriteMusic
"""
input AddFavoriteMusicInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: [FavoriteMusicInput!]!
}

"""
Autogenerated return type of AddFavoriteMusic.
"""
type AddFavoriteMusicPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
Autogenerated input type of AddSuperLikes
"""
input AddSuperLikesInput {
  amount: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of AddSuperLikes.
"""
type AddSuperLikesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

type Anime {
  averageScore: Int
  characters: [Character!]
  cover: String
  createdAt: ISO8601DateTime!
  endDate: ISO8601DateTime
  episodes: Int
  genres: String
  id: ID!
  isAdult: Boolean
  japaneseTitle: String
  popularity: Int
  startDate: ISO8601DateTime
  status: String
  studios: String
  title: String
  updatedAt: ISO8601DateTime!
  year: Int
}

input AnimeInput {
  genres: [String!]
  page: Int
  title: String
}

type Block {
  blockeeId: ID
  blockerId: ID
  createdAt: ISO8601DateTime!
  id: ID!
  reportId: ID
  updatedAt: ISO8601DateTime!
}

input BlockUserInput {
  blockedUserId: ID!
  userId: ID!
}

type Character {
  animeId: Int!
  createdAt: ISO8601DateTime!
  favorites: Int
  firstName: String
  id: ID!
  imageUrl: String!
  japaneseFullName: String
  lastName: String
  role: String
  updatedAt: ISO8601DateTime!
}

type Convention {
  attendees: [User!]
  country: String
  coverImageUrl: String
  createdAt: ISO8601DateTime!
  displayCity: String
  displayState: String
  endDate: ISO8601DateTime
  events: [Event!]
  fullAddress: String!
  id: ID!
  lonlat: String!
  reviews: [Review!]
  startDate: ISO8601DateTime!
  title: String!
  updatedAt: ISO8601DateTime!
  website: String
}

type Conversation {
  createdAt: ISO8601DateTime!
  id: ID!
  lastMessage: Message
  match: Match
  matchId: Int!
  messages: [Message!]
  unreadCount(userId: ID!): Int
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of CreateEvent
"""
input CreateEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: EventInput!
}

"""
Autogenerated return type of CreateEvent.
"""
type CreateEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event!
}

"""
Autogenerated input type of CreateJoinRequest
"""
input CreateJoinRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: JoinRequestInput!
}

"""
Autogenerated return type of CreateJoinRequest.
"""
type CreateJoinRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  joinRequest: JoinRequest!
}

"""
Autogenerated input type of CreateUser
"""
input CreateUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: UserInput!
}

"""
Autogenerated return type of CreateUser.
"""
type CreateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
Autogenerated input type of DeleteFavoriteAnime
"""
input DeleteFavoriteAnimeInput {
  animeIds: [ID!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of DeleteFavoriteAnime.
"""
type DeleteFavoriteAnimePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deleted: Boolean!
  user: User
}

"""
Autogenerated input type of DeleteFavoriteMusic
"""
input DeleteFavoriteMusicInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  musicIds: [ID!]!
  userId: ID!
}

"""
Autogenerated return type of DeleteFavoriteMusic.
"""
type DeleteFavoriteMusicPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deleted: Boolean!
  user: User
}

"""
Autogenerated input type of DeletePhoto
"""
input DeletePhotoInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  photoId: ID!
  userId: ID!
}

"""
Autogenerated return type of DeletePhoto.
"""
type DeletePhotoPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deleted: Boolean!
  gallery: Gallery
}

"""
Autogenerated input type of DeleteUser
"""
input DeleteUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: Int!
}

"""
Autogenerated return type of DeleteUser.
"""
type DeleteUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  softDeletedUser: User!
}

type DeviceInfo {
  createdAt: ISO8601DateTime!
  deviceType: String
  id: ID!
  token: String
  updatedAt: ISO8601DateTime!
  userId: Int!
}

"""
Autogenerated input type of DisbandParty
"""
input DisbandPartyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID!
}

"""
Autogenerated return type of DisbandParty.
"""
type DisbandPartyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  party: Gallery
}

type Event {
  conventionId: Int
  cosplayRequired: Int
  country: String!
  coverImageUrl: String
  createdAt: ISO8601DateTime!
  description: String
  displayCity: String!
  displayState: String!
  endDate: ISO8601DateTime
  fullAddress: String!
  hostId: Int!
  id: ID!
  lonlat: String!
  party: Party
  paymentRequired: Boolean
  startDate: ISO8601DateTime!
  title: String
  updatedAt: ISO8601DateTime!
  venue: String!
}

input EventInput {
  conventionId: Int
  cosplayRequired: String
  coverImage: Upload
  description: String!
  endDate: ISO8601DateTime
  fullAddress: String!
  memberLimit: Int!
  paymentRequired: Boolean
  startDate: ISO8601DateTime!
  title: String!
  userId: ID!
  venue: String!
}

type EventInvite {
  content: String
  createdAt: ISO8601DateTime!
  event: Event
  eventId: Int!
  id: ID!
  receiver: User
  receiverId: Int!
  sender: User
  senderId: Int!
  status: String!
  updatedAt: ISO8601DateTime!
}

input EventUpdateInput {
  conventionId: Int
  cosplayRequired: String
  coverImage: Upload
  description: String
  endDate: ISO8601DateTime
  eventId: ID!
  fullAddress: String
  memberLimit: Int
  startDate: ISO8601DateTime
  title: String
  userId: ID!
  venue: String
}

type FavoriteMusic {
  artistName: String
  coverUrl: String
  createdAt: ISO8601DateTime!
  hidden: Boolean
  id: ID!
  musicType: String
  spotifyId: String
  trackName: String
  updatedAt: ISO8601DateTime!
  userId: Int!
}

input FavoriteMusicInput {
  artistName: String
  coverUrl: String!
  hidden: Boolean
  musicType: String!
  spotifyId: String!
  trackName: String
  userId: ID!
}

input FavoriteMusicUpdate {
  artistName: String
  coverUrl: String!
  favoriteMusicId: ID!
  hidden: Boolean
  musicType: String!
  spotifyId: String!
  trackName: String
  userId: ID!
}

input FetchCharactersInput {
  characterName: String!
  genre: String
  page: Int
}

input FetchFeedInput {
  animeIds: [ID!]
  hasBio: Boolean
  maxAge: Int!
  milesAway: Int!
  minAge: Int!
  page: Int
  refresh: Boolean
  userId: ID!
  verified: Boolean
}

type Gallery {
  createdAt: ISO8601DateTime!
  id: ID!
  photos: [Photo!]
  updatedAt: ISO8601DateTime!
  userId: Int!
}

"""
Autogenerated input type of GetDistanceBetweenUsers
"""
input GetDistanceBetweenUsersInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: Int!
  vieweeId: Int!
}

"""
Autogenerated return type of GetDistanceBetweenUsers.
"""
type GetDistanceBetweenUsersPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  mi: Int!
}

"""
Autogenerated input type of GrantUserPremium
"""
input GrantUserPremiumInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: Int!
}

"""
Autogenerated return type of GrantUserPremium.
"""
type GrantUserPremiumPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

type JoinRequest {
  applicant: User
  conversation: Conversation
  conversationId: String
  createdAt: ISO8601DateTime!
  description: String
  event: Event
  eventId: Int!
  id: ID!
  status: String!
  updatedAt: ISO8601DateTime!
  userId: Int!
}

input JoinRequestInput {
  description: String
  eventId: ID!
  joinRequestId: ID
  status: String
  userId: ID!
}

"""
Autogenerated input type of LeaveParty
"""
input LeavePartyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  partyId: ID!
  userId: ID!
}

"""
Autogenerated return type of LeaveParty.
"""
type LeavePartyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  party: Party!
}

"""
Autogenerated input type of LeaveReview
"""
input LeaveReviewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: ReviewInput!
}

"""
Autogenerated return type of LeaveReview.
"""
type LeaveReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event!
}

type Like {
  createdAt: ISO8601DateTime!
  id: ID!
  likeType: String
  likeeId: Int
  updatedAt: ISO8601DateTime!
  userId: Int!
}

input LikeInput {
  likeType: String!
  likeeId: Int!
  userId: Int!
}

"""
Autogenerated input type of LikeUser
"""
input LikeUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: LikeInput!
}

"""
Autogenerated return type of LikeUser.
"""
type LikeUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  like: Like!
  match: Match
}

"""
Autogenerated input type of MarkConventionAttendance
"""
input MarkConventionAttendanceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  conventionId: ID!
  userId: ID!
}

"""
Autogenerated return type of MarkConventionAttendance.
"""
type MarkConventionAttendancePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  convention: Convention!
}

type Match {
  conversation: Conversation!
  createdAt: ISO8601DateTime!
  id: ID!
  matchee: User!
  matcheeId: Int
  updatedAt: ISO8601DateTime!
  user: User!
  userId: Int!
}

type Message {
  attachment: String
  attachmentType: String
  content: String
  conversationId: String
  createdAt: ISO8601DateTime!
  id: ID!
  reaction: String
  read: Boolean
  recommendation: Recommendation
  senderId: Int
  sticker: Sticker
  updatedAt: ISO8601DateTime!
}

input MessageInput {
  attachment: Upload
  attachmentType: String
  content: String
  conversationId: String!
  recommendedAnimeId: ID
  senderId: Int!
  stickerId: ID
}

input MessageUpdateInput {
  content: String
  messageId: ID!
  reaction: String
}

type Mutation {
  addDeviceToken(
    """
    Parameters for AddDeviceToken
    """
    input: AddDeviceTokenInput!
  ): AddDeviceTokenPayload
  addFavoriteAnime(
    """
    Parameters for AddFavoriteAnime
    """
    input: AddFavoriteAnimeInput!
  ): AddFavoriteAnimePayload
  addFavoriteMusic(
    """
    Parameters for AddFavoriteMusic
    """
    input: AddFavoriteMusicInput!
  ): AddFavoriteMusicPayload
  addSuperLikes(
    """
    Parameters for AddSuperLikes
    """
    input: AddSuperLikesInput!
  ): AddSuperLikesPayload
  createEvent(
    """
    Parameters for CreateEvent
    """
    input: CreateEventInput!
  ): CreateEventPayload
  createJoinRequest(
    """
    Parameters for CreateJoinRequest
    """
    input: CreateJoinRequestInput!
  ): CreateJoinRequestPayload
  createUser(
    """
    Parameters for CreateUser
    """
    input: CreateUserInput!
  ): CreateUserPayload
  deleteFavoriteAnime(
    """
    Parameters for DeleteFavoriteAnime
    """
    input: DeleteFavoriteAnimeInput!
  ): DeleteFavoriteAnimePayload
  deleteFavoriteMusic(
    """
    Parameters for DeleteFavoriteMusic
    """
    input: DeleteFavoriteMusicInput!
  ): DeleteFavoriteMusicPayload
  deletePhoto(
    """
    Parameters for DeletePhoto
    """
    input: DeletePhotoInput!
  ): DeletePhotoPayload
  deleteUser(
    """
    Parameters for DeleteUser
    """
    input: DeleteUserInput!
  ): DeleteUserPayload
  disbandParty(
    """
    Parameters for DisbandParty
    """
    input: DisbandPartyInput!
  ): DisbandPartyPayload
  getDistanceBetweenUsers(
    """
    Parameters for GetDistanceBetweenUsers
    """
    input: GetDistanceBetweenUsersInput!
  ): GetDistanceBetweenUsersPayload
  grantUserPremium(
    """
    Parameters for GrantUserPremium
    """
    input: GrantUserPremiumInput!
  ): GrantUserPremiumPayload
  leaveParty(
    """
    Parameters for LeaveParty
    """
    input: LeavePartyInput!
  ): LeavePartyPayload
  leaveReview(
    """
    Parameters for LeaveReview
    """
    input: LeaveReviewInput!
  ): LeaveReviewPayload
  likeUser(
    """
    Parameters for LikeUser
    """
    input: LikeUserInput!
  ): LikeUserPayload
  markConventionAttendance(
    """
    Parameters for MarkConventionAttendance
    """
    input: MarkConventionAttendanceInput!
  ): MarkConventionAttendancePayload
  rankFavoriteAnime(
    """
    Parameters for RankFavoriteAnime
    """
    input: RankFavoriteAnimeInput!
  ): RankFavoriteAnimePayload
  removeDeviceToken(
    """
    Parameters for RemoveDeviceToken
    """
    input: RemoveDeviceTokenInput!
  ): RemoveDeviceTokenPayload
  removePartyMember(
    """
    Parameters for RemovePartyMember
    """
    input: RemovePartyMemberInput!
  ): RemovePartyMemberPayload
  reorderPhotos(
    """
    Parameters for ReorderPhotos
    """
    input: ReorderPhotosInput!
  ): ReorderPhotosPayload
  reportUser(
    """
    Parameters for ReportUser
    """
    input: ReportUserInput!
  ): ReportUserPayload
  resendVerifyText(
    """
    Parameters for ResendVerifyText
    """
    input: ResendVerifyTextInput!
  ): ResendVerifyTextPayload
  sendEventInvite(
    """
    Parameters for SendEventInvite
    """
    input: SendEventInviteInput!
  ): SendEventInvitePayload
  sendMessage(
    """
    Parameters for SendMessage
    """
    input: SendMessageInput!
  ): SendMessagePayload
  sendPartyMessage(
    """
    Parameters for SendPartyMessage
    """
    input: SendPartyMessageInput!
  ): SendPartyMessagePayload
  setUserLocation(
    """
    Parameters for SetUserLocation
    """
    input: SetUserLocationInput!
  ): SetUserLocationPayload
  signIn(
    """
    Parameters for SignIn
    """
    input: SignInInput!
  ): SignInPayload
  submitVerifyRequest(
    """
    Parameters for SubmitVerifyRequest
    """
    input: SubmitVerifyRequestInput!
  ): SubmitVerifyRequestPayload
  undoLike(
    """
    Parameters for UndoLike
    """
    input: UndoLikeInput!
  ): UndoLikePayload
  unmatchUser(
    """
    Parameters for UnmatchUser
    """
    input: UnmatchUserInput!
  ): UnmatchUserPayload
  updateEvent(
    """
    Parameters for UpdateEvent
    """
    input: UpdateEventInput!
  ): UpdateEventPayload
  updateEventInvite(
    """
    Parameters for UpdateEventInvite
    """
    input: UpdateEventInviteInput!
  ): UpdateEventInvitePayload
  updateFavoriteMusic(
    """
    Parameters for UpdateFavoriteMusic
    """
    input: UpdateFavoriteMusicInput!
  ): UpdateFavoriteMusicPayload
  updateJoinRequest(
    """
    Parameters for UpdateJoinRequest
    """
    input: UpdateJoinRequestInput!
  ): UpdateJoinRequestPayload
  updateMessage(
    """
    Parameters for UpdateMessage
    """
    input: UpdateMessageInput!
  ): UpdateMessagePayload
  updateUser(
    """
    Parameters for UpdateUser
    """
    input: UpdateUserInput!
  ): UpdateUserPayload
  uploadPhoto(
    """
    Parameters for UploadPhoto
    """
    input: UploadPhotoInput!
  ): UploadPhotoPayload
  validatePhone(
    """
    Parameters for ValidatePhone
    """
    input: ValidatePhoneInput!
  ): ValidatePhonePayload
}

type Party {
  createdAt: ISO8601DateTime!
  disbanded: Boolean!
  eventId: Int!
  hostId: Int!
  id: ID!
  members: [User!]
  messages: [PartyMessage!]
  partyChat: PartyChat
  status: String!
  updatedAt: ISO8601DateTime!
}

type PartyChat {
  createdAt: ISO8601DateTime!
  deletedAt: ISO8601DateTime
  id: ID!
  messages: [PartyMessage!]!
  party: Party!
  partyId: Int!
  unreadCount(userId: ID!): Int
  updatedAt: ISO8601DateTime!
}

type PartyMessage {
  attachment: String
  attachmentType: String
  content: String
  createdAt: ISO8601DateTime!
  deletedAt: ISO8601DateTime
  id: ID!
  partyChat: PartyChat!
  partyChatId: Int!
  reaction: Int
  read: Boolean
  recommendation: Recommendation
  sender: [User!]!
  senderId: Int
  sticker: Sticker
  stickerId: Int
  updatedAt: ISO8601DateTime!
}

input PartyMessageInput {
  attachment: Upload
  attachmentType: String
  content: String
  partyId: ID!
  recommendedAnimeId: ID
  senderId: ID!
  stickerId: ID
}

type Photo {
  createdAt: ISO8601DateTime!
  galleryId: ID!
  id: ID!
  order: Int
  updatedAt: ISO8601DateTime!
  url: String!
}

type Query {
  fetchAnime(params: AnimeInput!): [Anime!]!
  fetchCharacters(params: FetchCharactersInput!): [Character!]!
  fetchConvention(conventionId: ID!): Event!
  fetchConventions(params: SearchEventInput!): [Convention!]!
  fetchConversations(page: Int, search: String, userId: ID!): [Conversation!]!
  fetchEvent(eventId: ID!): Event!
  fetchEvents(params: SearchEventInput!): [Event!]!
  fetchFeed(params: FetchFeedInput!): [User!]!
  fetchJoinRequests(eventId: ID!, page: Int): [JoinRequest!]!
  fetchMessages(conversationId: ID!, page: Int): [Message!]!
  fetchReports(page: Int, perPage: Int, reason: Int, userId: ID!): [Report!]!
  fetchSticker(stickerId: ID!): Sticker!
  fetchStickers(page: Int): [Sticker!]!
  fetchUser(userId: ID!): User!
  fetchVerifyRequests(page: Int, perPage: Int, userId: ID!): [VerifyRequest!]!
}

"""
Autogenerated input type of RankFavoriteAnime
"""
input RankFavoriteAnimeInput {
  animeIds: [ID!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of RankFavoriteAnime.
"""
type RankFavoriteAnimePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

type Recommendation {
  anime: Anime
  animeId: Int!
  createdAt: ISO8601DateTime!
  id: ID!
  messageId: Int!
  recommendeeId: Int!
  updatedAt: ISO8601DateTime!
  userId: Int!
}

"""
Autogenerated input type of RemoveDeviceToken
"""
input RemoveDeviceTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deviceToken: String!
  userId: ID!
}

"""
Autogenerated return type of RemoveDeviceToken.
"""
type RemoveDeviceTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
Autogenerated input type of RemovePartyMember
"""
input RemovePartyMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  partyId: ID!
  removedUserId: ID!
}

"""
Autogenerated return type of RemovePartyMember.
"""
type RemovePartyMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  party: Party!
}

"""
Autogenerated input type of ReorderPhotos
"""
input ReorderPhotosInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  order: ID!
  photoId: ID!
}

"""
Autogenerated return type of ReorderPhotos.
"""
type ReorderPhotosPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  gallery: Gallery
  photo: Photo!
}

type Report {
  conversation: Conversation!
  conversationId: String!
  createdAt: ISO8601DateTime!
  id: ID!
  offender: User!
  offenseId: ID
  reason: String
  reporter: User!
  updatedAt: ISO8601DateTime!
  userId: ID!
}

input ReportInput {
  conversationId: String!
  offenseId: ID!
  reason: String!
  userId: ID!
}

"""
Autogenerated input type of ReportUser
"""
input ReportUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: ReportInput!
}

"""
Autogenerated return type of ReportUser.
"""
type ReportUserPayload {
  blocked: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  report: Report!
}

"""
Autogenerated input type of ResendVerifyText
"""
input ResendVerifyTextInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  phone: String!
}

"""
Autogenerated return type of ResendVerifyText.
"""
type ResendVerifyTextPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  status: Int!
  user: User
}

type Review {
  createdAt: ISO8601DateTime!
  feedback: String
  id: ID!
  reviewType: String!
  reviewableId: Int!
  reviewableType: String!
  score: Float!
  source: Reviewable
  updatedAt: ISO8601DateTime!
  userId: Int!
}

input ReviewInput {
  feedback: String!
  reviewType: String!
  reviewableId: ID!
  reviewableType: String!
  score: Float!
  userId: ID!
}

union Reviewable = Convention | Event | Party | User

input SearchEventInput {
  endDate: ISO8601DateTime
  milesAway: Int
  page: Int
  query: String
  startDate: ISO8601DateTime!
  userId: ID
}

"""
Autogenerated input type of SendEventInvite
"""
input SendEventInviteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  content: String
  eventId: ID!
  receiverId: ID!
  senderId: ID!
}

"""
Autogenerated return type of SendEventInvite.
"""
type SendEventInvitePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventInvite: EventInvite!
}

"""
Autogenerated input type of SendMessage
"""
input SendMessageInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: MessageInput!
}

"""
Autogenerated return type of SendMessage.
"""
type SendMessagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  message: Message!
}

"""
Autogenerated input type of SendPartyMessage
"""
input SendPartyMessageInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: PartyMessageInput!
}

"""
Autogenerated return type of SendPartyMessage.
"""
type SendPartyMessagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  message: PartyMessage!
}

"""
Autogenerated input type of SetUserLocation
"""
input SetUserLocationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  latitude: String!
  longitude: String!
  userId: Int!
}

"""
Autogenerated return type of SetUserLocation.
"""
type SetUserLocationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
Autogenerated input type of SignIn
"""
input SignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String!
}

"""
Autogenerated return type of SignIn.
"""
type SignInPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

type Sticker {
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
  url: String!
}

"""
Autogenerated input type of SubmitVerifyRequest
"""
input SubmitVerifyRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: VerifyRequestInput!
}

"""
Autogenerated return type of SubmitVerifyRequest.
"""
type SubmitVerifyRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
The subscription root for the GraphQL schema
"""
type Subscription

"""
Autogenerated input type of UndoLike
"""
input UndoLikeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of UndoLike.
"""
type UndoLikePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  status: String!
  undidUser: User
}

"""
Autogenerated input type of UnmatchUser
"""
input UnmatchUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: BlockUserInput!
}

"""
Autogenerated return type of UnmatchUser.
"""
type UnmatchUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
Autogenerated input type of UpdateEvent
"""
input UpdateEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: EventUpdateInput!
}

"""
Autogenerated input type of UpdateEventInvite
"""
input UpdateEventInviteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventInviteId: ID!
  receiverId: ID!
  status: String!
}

"""
Autogenerated return type of UpdateEventInvite.
"""
type UpdateEventInvitePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventInvite: EventInvite!
}

"""
Autogenerated return type of UpdateEvent.
"""
type UpdateEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event!
}

"""
Autogenerated input type of UpdateFavoriteMusic
"""
input UpdateFavoriteMusicInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: [FavoriteMusicUpdate!]!
}

"""
Autogenerated return type of UpdateFavoriteMusic.
"""
type UpdateFavoriteMusicPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
Autogenerated input type of UpdateJoinRequest
"""
input UpdateJoinRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: JoinRequestInput!
}

"""
Autogenerated return type of UpdateJoinRequest.
"""
type UpdateJoinRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  joinRequest: JoinRequest!
}

"""
Autogenerated input type of UpdateMessage
"""
input UpdateMessageInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: MessageUpdateInput!
}

"""
Autogenerated return type of UpdateMessage.
"""
type UpdateMessagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  message: Message!
}

"""
Autogenerated input type of UpdateUser
"""
input UpdateUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: UserUpdateInput!
}

"""
Autogenerated return type of UpdateUser.
"""
type UpdateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

scalar Upload

"""
Autogenerated input type of UploadPhoto
"""
input UploadPhotoInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  image: Upload
  order: Int!
  userId: Int!
}

"""
Autogenerated return type of UploadPhoto.
"""
type UploadPhotoPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

type User {
  animes: [Anime!]
  bio: String
  birthday: ISO8601DateTime
  blocks: [Block!]
  country: String
  createdAt: ISO8601DateTime!
  currentSignInAt: ISO8601DateTime
  currentSignInIp: String
  desiredGender: String
  deviceInfos: [DeviceInfo!]
  displayCity: String
  displayState: String
  encryptedPassword: String!
  events: [Event!]
  favoriteMusic: [FavoriteMusic!]
  firstName: String!
  gallery: Gallery
  gender: String
  hasLocationHidden: Boolean
  hostReviews: [Review!]
  hostScore: Float
  id: ID!
  isDisplayingActive: Boolean
  isDisplayingRecentlyActive: Boolean
  isFakeProfile: Boolean!
  lastSignInAt: ISO8601DateTime
  lastSignInIp: String
  lonlat: String
  matches: [Match!]
  milesAway(otherUserId: ID!): Int
  nextPaymentDate: ISO8601DateTime
  occupation: String
  onlineStatus: String
  partyMemberReviews: [Review!]
  partyMemberScore: Float
  phone: String!
  premium: Boolean!
  role: String!
  school: String
  signInCount: Int!
  superLikeCount: Int
  updatedAt: ISO8601DateTime!
  verified: Boolean!
}

input UserInput {
  phone: String!
}

input UserUpdateInput {
  bio: String
  birthday: ISO8601DateTime
  desiredGender: Int
  firstName: String
  gender: Int
  hasLocationHidden: Boolean
  isDisplayingActive: Boolean
  isDisplayingRecentlyActive: Boolean
  occupation: String
  phone: String
  school: String
  superLikeCount: Int
  userId: ID!
  verified: Boolean
}

"""
Autogenerated input type of ValidatePhone
"""
input ValidatePhoneInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: Int!
  userId: ID!
}

"""
Autogenerated return type of ValidatePhone.
"""
type ValidatePhonePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  profileFilled: Boolean!
  token: String!
  user: User!
}

type VerifyRequest {
  createdAt: ISO8601DateTime!
  id: ID!
  status: String!
  updatedAt: ISO8601DateTime!
  url: String!
  user: User!
  userId: Int!
}

input VerifyRequestInput {
  image: Upload!
  userId: Int!
}
