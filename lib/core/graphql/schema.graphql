"""
Autogenerated input type of AddFavoriteAnime
"""
input AddFavoriteAnimeInput {
  animeIds: [ID!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of AddFavoriteAnime.
"""
type AddFavoriteAnimePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
Autogenerated input type of AdminSignIn
"""
input AdminSignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String!
}

"""
Autogenerated return type of AdminSignIn.
"""
type AdminSignInPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

type Anime {
  averageScore: Int
  cover: String
  createdAt: ISO8601DateTime!
  endDate: ISO8601DateTime
  episodes: Int
  genres: String
  id: ID!
  isAdult: Boolean
  popularity: Int
  startDate: ISO8601DateTime
  status: String
  studios: String
  title: String
  updatedAt: ISO8601DateTime!
  year: Int
}

input AnimeInput {
  genres: [String!]
  page: Int!
  title: String
}

"""
Autogenerated input type of AnswerVerifyRequest
"""
input AnswerVerifyRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  decision: String!
  userId: ID!
  verifyRequestId: ID!
}

"""
Autogenerated return type of AnswerVerifyRequest.
"""
type AnswerVerifyRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  verifyRequest: VerifyRequest!
}

type Conversation {
  createdAt: ISO8601DateTime!
  id: ID!
  matchId: Int!
  messages: [Message!]
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of CreateUser
"""
input CreateUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: UserInput!
}

"""
Autogenerated return type of CreateUser.
"""
type CreateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
Autogenerated input type of DeleteFavoriteAnime
"""
input DeleteFavoriteAnimeInput {
  animeId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of DeleteFavoriteAnime.
"""
type DeleteFavoriteAnimePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deleted: Boolean!
  user: User
}

"""
Autogenerated input type of DeletePhoto
"""
input DeletePhotoInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  photoId: ID!
  userId: ID!
}

"""
Autogenerated return type of DeletePhoto.
"""
type DeletePhotoPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deleted: Boolean!
  gallery: Gallery
}

"""
Autogenerated input type of DeleteUser
"""
input DeleteUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: Int!
}

"""
Autogenerated return type of DeleteUser.
"""
type DeleteUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  softDeleted: Boolean!
}

type FavoriteMusic {
  cover: String
  coverUrl: String
  createdAt: ISO8601DateTime!
  id: ID!
  musicType: String
  name: String
  updatedAt: ISO8601DateTime!
  userId: Int!
}

type Gallery {
  createdAt: ISO8601DateTime!
  id: ID!
  photos: [Photo!]
  updatedAt: ISO8601DateTime!
  userId: Int!
}

"""
Autogenerated input type of GetDistanceBetweenUsers
"""
input GetDistanceBetweenUsersInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: Int!
  vieweeId: Int!
}

"""
Autogenerated return type of GetDistanceBetweenUsers.
"""
type GetDistanceBetweenUsersPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  mi: Int!
}

"""
Autogenerated input type of GrantUserPremium
"""
input GrantUserPremiumInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: Int!
}

"""
Autogenerated return type of GrantUserPremium.
"""
type GrantUserPremiumPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

type Like {
  createdAt: ISO8601DateTime!
  id: ID!
  likeType: Int
  likeeId: Int
  updatedAt: ISO8601DateTime!
  userId: Int!
}

input LikeInput {
  likeType: Int!
  likeeId: Int!
  userId: Int!
}

"""
Autogenerated input type of LikeUser
"""
input LikeUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: LikeInput!
}

"""
Autogenerated return type of LikeUser.
"""
type LikeUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  like: Like!
  match: Match
}

type Match {
  conversation: Conversation!
  createdAt: ISO8601DateTime!
  id: ID!
  matcheeId: Int
  updatedAt: ISO8601DateTime!
  userId: Int!
}

type Message {
  attachment: String
  attachmentType: String
  content: String
  conversationId: String
  createdAt: ISO8601DateTime!
  id: ID!
  reaction: String
  read: Boolean
  recommendation: Recommendation
  senderId: Int
  sticker: Sticker
  updatedAt: ISO8601DateTime!
}

input MessageInput {
  attachment: Upload
  content: String!
  conversationId: String!
  recommendedAnimeId: ID
  senderId: Int!
  stickerId: ID
}

type Mutation {
  addFavoriteAnime(
    """
    Parameters for AddFavoriteAnime
    """
    input: AddFavoriteAnimeInput!
  ): AddFavoriteAnimePayload
  adminSignIn(
    """
    Parameters for AdminSignIn
    """
    input: AdminSignInInput!
  ): AdminSignInPayload
  answerVerifyRequest(
    """
    Parameters for AnswerVerifyRequest
    """
    input: AnswerVerifyRequestInput!
  ): AnswerVerifyRequestPayload
  createUser(
    """
    Parameters for CreateUser
    """
    input: CreateUserInput!
  ): CreateUserPayload
  deleteFavoriteAnime(
    """
    Parameters for DeleteFavoriteAnime
    """
    input: DeleteFavoriteAnimeInput!
  ): DeleteFavoriteAnimePayload
  deletePhoto(
    """
    Parameters for DeletePhoto
    """
    input: DeletePhotoInput!
  ): DeletePhotoPayload
  deleteUser(
    """
    Parameters for DeleteUser
    """
    input: DeleteUserInput!
  ): DeleteUserPayload
  getDistanceBetweenUsers(
    """
    Parameters for GetDistanceBetweenUsers
    """
    input: GetDistanceBetweenUsersInput!
  ): GetDistanceBetweenUsersPayload
  grantUserPremium(
    """
    Parameters for GrantUserPremium
    """
    input: GrantUserPremiumInput!
  ): GrantUserPremiumPayload
  likeUser(
    """
    Parameters for LikeUser
    """
    input: LikeUserInput!
  ): LikeUserPayload
  rankFavoriteAnime(
    """
    Parameters for RankFavoriteAnime
    """
    input: RankFavoriteAnimeInput!
  ): RankFavoriteAnimePayload
  reorderPhotos(
    """
    Parameters for ReorderPhotos
    """
    input: ReorderPhotosInput!
  ): ReorderPhotosPayload
  reportUser(
    """
    Parameters for ReportUser
    """
    input: ReportUserInput!
  ): ReportUserPayload
  resendVerifyText(
    """
    Parameters for ResendVerifyText
    """
    input: ResendVerifyTextInput!
  ): ResendVerifyTextPayload
  sendMessage(
    """
    Parameters for SendMessage
    """
    input: SendMessageInput!
  ): SendMessagePayload
  setSpotifyEmail(
    """
    Parameters for SetSpotifyEmail
    """
    input: SetSpotifyEmailInput!
  ): SetSpotifyEmailPayload
  setUserLocation(
    """
    Parameters for SetUserLocation
    """
    input: SetUserLocationInput!
  ): SetUserLocationPayload
  signIn(
    """
    Parameters for SignIn
    """
    input: SignInInput!
  ): SignInPayload
  submitVerifyRequest(
    """
    Parameters for SubmitVerifyRequest
    """
    input: SubmitVerifyRequestInput!
  ): SubmitVerifyRequestPayload
  undoLike(
    """
    Parameters for UndoLike
    """
    input: UndoLikeInput!
  ): UndoLikePayload
  updateUser(
    """
    Parameters for UpdateUser
    """
    input: UpdateUserInput!
  ): UpdateUserPayload
  uploadPhoto(
    """
    Parameters for UploadPhoto
    """
    input: UploadPhotoInput!
  ): UploadPhotoPayload
  validatePhone(
    """
    Parameters for ValidatePhone
    """
    input: ValidatePhoneInput!
  ): ValidatePhonePayload
}

type Photo {
  createdAt: ISO8601DateTime!
  galleryId: ID!
  id: ID!
  order: Int
  updatedAt: ISO8601DateTime!
  url: String!
}

type Query {
  fetchAnime(params: AnimeInput!): [Anime!]!
  fetchConversations(page: Int, userId: ID!): [Conversation!]!
  fetchFeed(milesAway: Int!, page: Int, userId: ID!): [User!]!
  fetchReports(page: Int, perPage: Int, reason: Int, userId: ID!): [Report!]!
  fetchSticker(stickerId: ID): Sticker!
  fetchStickers(page: Int): [Sticker!]!
  fetchUser(userId: ID!): User!
  fetchVerifyRequests(page: Int, perPage: Int, userId: ID!): [VerifyRequest!]!
}

"""
Autogenerated input type of RankFavoriteAnime
"""
input RankFavoriteAnimeInput {
  animeIds: [ID!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of RankFavoriteAnime.
"""
type RankFavoriteAnimePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

type Recommendation {
  anime: Anime
  animeId: Int!
  createdAt: ISO8601DateTime!
  id: ID!
  messageId: Int!
  recommendeeId: Int!
  updatedAt: ISO8601DateTime!
  userId: Int!
}

"""
Autogenerated input type of ReorderPhotos
"""
input ReorderPhotosInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  order: ID!
  photoId: ID!
}

"""
Autogenerated return type of ReorderPhotos.
"""
type ReorderPhotosPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  gallery: Gallery
  photo: Photo!
}

type Report {
  conversation: Conversation!
  conversationId: ID!
  createdAt: ISO8601DateTime!
  id: ID!
  offender: User!
  offenseId: Int
  reason: String
  reporter: User!
  updatedAt: ISO8601DateTime!
  userId: Int!
}

input ReportInput {
  conversationId: String!
  offenseId: Int!
  reason: Int!
  userId: Int!
}

"""
Autogenerated input type of ReportUser
"""
input ReportUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: ReportInput!
}

"""
Autogenerated return type of ReportUser.
"""
type ReportUserPayload {
  blocked: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResendVerifyText
"""
input ResendVerifyTextInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  phone: String!
}

"""
Autogenerated return type of ResendVerifyText.
"""
type ResendVerifyTextPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  status: Int!
  user: User
}

"""
Autogenerated input type of SendMessage
"""
input SendMessageInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: MessageInput!
}

"""
Autogenerated return type of SendMessage.
"""
type SendMessagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  message: Message!
}

"""
Autogenerated input type of SetSpotifyEmail
"""
input SetSpotifyEmailInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  userId: Int!
}

"""
Autogenerated return type of SetSpotifyEmail.
"""
type SetSpotifyEmailPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
Autogenerated input type of SetUserLocation
"""
input SetUserLocationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  latitude: String!
  longitude: String!
  userId: Int!
}

"""
Autogenerated return type of SetUserLocation.
"""
type SetUserLocationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
Autogenerated input type of SignIn
"""
input SignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String!
}

"""
Autogenerated return type of SignIn.
"""
type SignInPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

type Sticker {
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
  url: String!
}

"""
Autogenerated input type of SubmitVerifyRequest
"""
input SubmitVerifyRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: VerifyRequestInput!
}

"""
Autogenerated return type of SubmitVerifyRequest.
"""
type SubmitVerifyRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
The subscription root for the GraphQL schema
"""
type Subscription

"""
Autogenerated input type of UndoLike
"""
input UndoLikeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of UndoLike.
"""
type UndoLikePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  status: String!
  undidUser: User
}

"""
Autogenerated input type of UpdateUser
"""
input UpdateUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: UserUpdateInput!
}

"""
Autogenerated return type of UpdateUser.
"""
type UpdateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

scalar Upload

"""
Autogenerated input type of UploadPhoto
"""
input UploadPhotoInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  image: Upload
  order: Int!
  userId: Int!
}

"""
Autogenerated return type of UploadPhoto.
"""
type UploadPhotoPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

type User {
  animes: [Anime!]
  bio: String
  birthday: ISO8601DateTime
  createdAt: ISO8601DateTime!
  currentSignInAt: ISO8601DateTime
  currentSignInIp: String
  desiredGender: String
  displayCity: String
  displayState: String
  encryptedPassword: String!
  favoriteMusic: [FavoriteMusic!]
  firstName: String!
  gallery: Gallery
  gender: String
  id: ID!
  lastSignInAt: ISO8601DateTime
  lastSignInIp: String
  lonlat: String
  matches: [Match!]
  occupation: String
  onlineStatus: String
  phone: String!
  premium: Boolean!
  role: String!
  school: String
  signInCount: Int!
  spotifyEmail: String
  updatedAt: ISO8601DateTime!
  verified: Boolean!
}

input UserInput {
  phone: String!
}

input UserUpdateInput {
  bio: String
  birthday: ISO8601DateTime
  desiredGender: Int
  firstName: String
  gender: Int
  occupation: String
  phone: String
  school: String
  userId: ID!
  verified: Boolean
}

"""
Autogenerated input type of ValidatePhone
"""
input ValidatePhoneInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: Int!
  userId: ID!
}

"""
Autogenerated return type of ValidatePhone.
"""
type ValidatePhonePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  profileFilled: Boolean!
  token: String!
  user: User!
}

type VerifyRequest {
  createdAt: ISO8601DateTime!
  id: ID!
  status: String!
  updatedAt: ISO8601DateTime!
  url: String!
  user: User!
  userId: Int!
}

input VerifyRequestInput {
  image: Upload!
  userId: Int!
}
